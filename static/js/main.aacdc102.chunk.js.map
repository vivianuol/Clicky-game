{"version":3,"sources":["components/Navbar/index.js","components/Hero/index.js","components/Cards/Cartoon.js","components/Cards/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","Col","xs","md","xsHidden","score","topScore","Hero","className","Cartoon","onClick","handleClick","id","Cards","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOnClick","e","console","log","target","alt","state","clickedChars","length","indexOf","resetClickedChars","newArr","shuffle","arr","setState","concat","toConsumableArray","callbackFromParent","posts","i","j","Math","floor","random","temp","_this2","map","item","Cards_Cartoon","key","React","Component","Footer","App","myCallback","dataFromCards","components_Navbar","components_Hero","components_Cards","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aacdc102.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { Navbar as BSNavbar } from 'react-bootstrap';\r\n\r\n\r\nfunction Navbar (props) {\r\n        return (\r\n            <BSNavbar>\r\n                        <Col xs={6} md={4}>\r\n                            <h2>Clicky Game</h2>\r\n                        </Col>\r\n                        <Col xs={6} md={4}>\r\n                            <h3>Click an image to begin!</h3>\r\n                        </Col>\r\n                        <Col xsHidden md={4}>\r\n                            <h3>score: {props.score } </h3>\r\n                            <h3>topScore: {props.topScore }</h3>\r\n                            \r\n                        </Col>\r\n                    \r\n            </BSNavbar>\r\n        );\r\n    }\r\n\r\nexport default Navbar","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Hero() {\r\n  return (\r\n    <div className=\"hero\">\r\n      <h2>Clicky Game!</h2>\r\n      <h4>Click on an image to earn points, but don't click on any more than once!</h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Hero;\r\n","import React from \"react\";\r\n\r\n\r\nfunction Cartoon(props) {\r\n    return (\r\n        <div className=\"item\" onClick = {props.handleClick} >\r\n            <div className=\"image\" id={props.id}  ></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cartoon;","import React from \"react\";\r\nimport Cartoon from \"./Cartoon\";\r\nimport \"./style.css\";\r\n\r\n\r\nclass Cards extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        arr: [\r\n             \"Minions\"\r\n        ,       \r\n             \"Smurfs\"\r\n        , \r\n             \"SuperMareo\"\r\n        ,\r\n             \"Spongebob_Squarepants\"\r\n        , \r\n            \"Pikachu\"\r\n        , \r\n             \"Sally_Brown\"\r\n        , \r\n             \"SpongeBob_Transparent\"\r\n        ,           \r\n            \"MarieCat\"\r\n        ],\r\n\r\n        clickedChars:[]\r\n        }\r\n    }\r\n\r\n    shuffle(posts){\r\n        ///shuffle using some algo\r\n        let i = posts.length - 1;\r\n        for (; i > 0; i--) {\r\n          const j = Math.floor(Math.random() * (i + 1));\r\n          const temp = posts[i];\r\n          posts[i] = posts[j];\r\n          posts[j] = temp;\r\n        }\r\n       return posts\r\n       }\r\n\r\n    handleOnClick = e => {\r\n        console.log(e.target.alt + \", onclick!\");\r\n        console.log(\"clickedCharsAmount: \" +this.state.clickedChars.length);\r\n        console.log(\"clickedChars: \" + this.state.clickedChars);\r\n        console.log(\"indexOf: \" + this.state.clickedChars.indexOf(e.target.alt));\r\n        if(this.state.clickedChars.length > 0 && this.state.clickedChars.indexOf(e.target.alt) >= 0) {\r\n           this.resetClickedChars()\r\n           console.log(\"existing img clicked.\")\r\n        } else {\r\n            let newArr = this.shuffle(this.state.arr);\r\n            this.setState({\r\n                arr: newArr, \r\n                clickedChars: [...this.state.clickedChars, e.target.alt]\r\n            })\r\n            console.log(\"new img clicked.\")\r\n\r\n        }\r\n        this.props.callbackFromParent(this.state.clickedChars.length);\r\n    }\r\n\r\n    resetClickedChars () {\r\n        this.setState({\r\n            arr: this.shuffle(this.state.arr),\r\n            clickedChars: []\r\n        })\r\n    }\r\n\r\n        render() {\r\n            return (\r\n                <div className=\"cards-layout wrapper\">\r\n                  {this.state.arr.map((item, i) => <Cartoon id={item} key={i} handleClick={this.handleOnClick} />)}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    export default Cards;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport './assets/images/logo.svg';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <p>&copy;copyright PENG 2019</p>\r\n            {/* <img src={require(\"../assets/images/logo.svg\")} alt=\"logo\" width=\"50px\" height=\"50px\" /> */}\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Hero from \"./components/Hero\";\nimport Cards from \"./components/Cards\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state ={\n      score: 0,\n      topScore: 0\n    }\n  }\n\n  myCallback = dataFromCards => {\n      this.setState ({\n        score: dataFromCards\n      })\n    if(dataFromCards > this.state.topScore) {\n      this.setState  ({\n        topScore: dataFromCards\n      })\n    }\n}\n\n\n \n  render() {\n    return (\n      <div>\n        <Navbar score= {this.state.score} topScore={this.state.topScore} />\n        <Hero />\n        <Cards callbackFromParent={this.myCallback} />\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}